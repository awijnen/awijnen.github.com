<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | Anthony Wijnen]]></title>
  <link href="http://awijnen.github.com/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://awijnen.github.com/"/>
  <updated>2013-03-18T23:32:25-04:00</updated>
  <id>http://awijnen.github.com/</id>
  <author>
    <name><![CDATA[Anthony Wijnen]]></name>
    <email><![CDATA[anthony.wijnen@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building my first data-driven Sinatra app and deploying it to Heroku]]></title>
    <link href="http://awijnen.github.com/blog/2013/02/25/building-your-first-sinatra-app-and-deploying-to-heroku/"/>
    <updated>2013-02-25T00:06:00-05:00</updated>
    <id>http://awijnen.github.com/blog/2013/02/25/building-your-first-sinatra-app-and-deploying-to-heroku</id>
    <content type="html"><![CDATA[<div class='container'>
  <p>We just wrapped up our third week at the <a href="http://www.flatironschool.com">Flatiron School</a>. It's been intense, exhausting, but at the same time insanely gratifying. One of the things that kept us all sane is our weekly tradition called 'Feeling Friday', in which we collectively share what's on our mind.</p>

  <p>That being said, I noticed that 1) some people get somewhat uncomfortable when they have to open up in public, and 2) others were scrambling to get their thoughts together, when being put on the spot. I've been in the second category before. The 'Feeling Friday Web App' should come in handy to make this whole experience even more awesome by allowing anonymous sharing whenever you're up for it. At the same time it's a great way to learn about data-driven Sinatra web apps using the DataMapper gem, and deploying them to Heroku. Both of which I had never done before up until 24h ago.</p>

  <p>Before moving any further, if you got cold shivers reading the word Sinatra or DataMapper, I suggest you read both <a href="http://net.tutsplus.com/tutorials/ruby/singing-with-sinatra/">this</a> and <a href="http://www.blacktm.com/talks/building_web_apps_with_rack_and_sinatra">this</a> tutorial first.</p>

  <p>Let's get cracking. Here's what we'll use to build our app:</p>

  <ul>
    <li>Ruby</li>
    <li>Rack</li>
    <li>Sinatra</li>
    <li>DataMapper gem</li>
    <li>PostgreSQL</li>
    <li>HTML/CSS</li>
    <li>Git (for version control)</li>
    <li>Heroku</li>    
  </ul>

  <h3>Easy does it</h3>
  <p>Let's start it off simple. We first create a new folder and add the brains of the operation, i.e. <code>feelingfriday.rb</code>. Here are the gems we'll be using:</p>

    {% codeblock Gems to include in feelingfriday.rb lang:ruby %}
    require 'rubygems'
    require 'sinatra'
    require 'data_mapper'
    require 'dm-postgres-adapter'{% endcodeblock %}

  <p>We’re going to be using a PostgreSQL database to store the notes, and we’ll use the gem <a href="http://datamapper.org/">DataMapper</a> to communicate with the database. DataMapper is a gem that packages all the code you need to automatically map the classes you create to entries in the database. For example, we'll create a class Notes, which DataMapper will 'map' to a Notes table in the database. Every time you create a new Notes instance (i.e. you create a note), DataMapper will make sure it saves it to the database. Finally, you'll need to specify an adapter gem, that'll allow DataMapper to talk to the type of database you selected (in our case PostgreSQL).</p>

  <p>Please note that throughout the rest of this post I'll use 'Note' and 'Emotion' interchangeably.</p>

  <h3>Build your model and Setup the Database</h3>

  <p>Let's take advantage of <a href="http://datamapper.org/">DataMapper</a> right away. We'll create the class Note, and Comment, which are the two key building block of our Feeling Friday app, and we'll include DataMapper as a resource. This allows us to specify properties, that'll map to columns in the database table.</p>

    {% codeblock Set up Database in feelingfriday.rb lang:ruby %}

      DataMapper.setup(:default, ENV['DATABASE_URL'] || 'postgres://localhost/mydb')

      class Note
        include DataMapper::Resource

        # setting up a Notes table
        # setting up database schema with 5 columns
        property :id, Serial # serial will auto increment
        property :content, Text, :required => true
        property :complete, Boolean, :required => true, :default => false
        property :created_at, DateTime
        property :updated_at, DateTime

        has n, :comments
      end

      class Comment
        include DataMapper::Resource

        property :id, Serial
        property :content, Text
        property :created_at, DateTime
        property :updated_at, DateTime

        belongs_to :note
      end

      DataMapper.finalize.auto_upgrade!{% endcodeblock %}

      <p></p>

  <h3>Setting up the Home Page</h3>
  <p>Once we're done it'll look like this, but let's take it one step at a time.</p>
  <img src="http://awijnen.github.com/images/feelingfridayapp.png">

  <p>First, let's go into <code>feelingfriday.rb</code> and create the necessary routes to create, read, update, and delete notes and comments</p>

  <h3>Get all emotions</h3>

  {% codeblock Get all emotions from the database and display them in the home page lang:ruby %}
      get '/' do
        @notes = Note.all :order => :id.desc
        @title = "All Emotions"
        erb :home
      end{% endcodeblock %}

  <p>On the second line you see how we retrieve all the notes from the database. If you’ve used ActiveRecord (the ORM used in Rails) before, DataMapper’s syntax will feel very familiar. The notes are assigned to the <code>@notes</code> instance variable. It’s important to use instance variables (that’s variables beginning with an @) so that they’ll be accessible from within the view file.
  </p>
  <p>We set the <code>@title</code> instance variable, and load the views/home.erb view file through the ERB parser.</p>
  <p>Now let's first create the structure of our html page, before we start populating it with emotions.</p>

    <h3>Create a layout</h3>
  <p>It's time to create the html struture of our page. We'll do that in two parts. The first part is the skeleton of the website, which will basically be everything that's copied across pages (i.e. header, footer, background, etcera. This is typically stored in the <code>layout.erb</code> file.</p>

  {% codeblock layout.erb lang:erb %}
  <!doctype html>  
    <html lang="en">  
    <head>  
      <meta charset="utf8">  
      <title><%= @title + ' | Feeling Friday' %></title>  
      <link href="http://awijnen.github.com/reset.css" rel="stylesheet" type="text/css">  
      <link href="http://awijnen.github.com/style.css" rel="stylesheet" type="text/css">
      <script src="http://awijnen.github.com/main.js"></script>
    </head>  
    <body>  
      <header>  
        <hgroup>  
          <h1><a href="http://awijnen.github.com/">Feeling Friday</a></h1>  
          <h2>'cause we're an emotional bunch</h2>
          <a id = "github" href="https://github.com/awijnen/Feeling_Friday">
            <img src= "https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub">
          </a>   
        </hgroup>  
      </header>  
      
        <div id="main">
          <%= yield %>  
        </div>  
        
      <footer>  
        <p><small>An app for the <a href="http://students.flatironschool.com/">Students of the Flatiron School</a>.</small></p> 
      </footer> 

      # Google Analytics
      <script type="text/javascript">

        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-38874027-1']);
        _gaq.push(['_trackPageview']);

        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();

      </script>

    </body>  
    </html>{% endcodeblock %}

  <p>The most important line of code in <code>layout.erb</code> is where <code>yield</code> is defined. It is at this exact moment that we'll insert all the html content defined in <code>home.erb</code>, <code>edit.erb</code>, and <code>delete.erb</code> (and any other view you might want to add for that matter).</p>

  <p>Next, we'll code up the html for the actual emotion form (where you add a new emotion), as well as the html that will display all the emotions from the database. Again, this code will be injected in <code>layout.erb</code> where <code>yield</code> is defined.</p>

  {% codeblock home.erb: Display all emotions lang:erb %}
      <section id="add">
      <form action="/" method="post">
        <textarea name="content" placeholder="Your deepest emotions go here&hellip;"></textarea>
        <input type="submit" value="Save emotion">
      </form>
      </section>
      <% @notes.each do |note| %>  
        <article>  
          <p>  
            <%= note.content %>  
            <span><a href="http://awijnen.github.com/<%= note.id %>">[edit]</a></span>  
          </p>   
          <p class="meta">Created: <%= note.created_at %></p>  
        </article>
        <br>
      <% end %> 
      <p class="remove">Remove all this Emotional Crap!<a href='http://awijnen.github.com/migrate'><input type="submit" name="Submit"></a></p>{% endcodeblock %}
    {% endcodeblock %} 

  <p>We'll continue now by adding in the routes to edit, and delete emotions, as well as create views for edit, and delete respectively.</p>

  <h3>Create an Emotion</h3>
    <p>Right now if you try submitting the form on the home page, you’re going to get a route error. Let’s create the POST route for the home page now:</p>
    
    {% codeblock Create a new emotion and save it to the database lang:ruby %}
      post '/post' do
        n = Note.new
        n.content = params[:content]
        n.created_at = Time.now
        n.updated_at = Time.now
        n.save
        redirect '/'
      end{% endcodeblock %}

    <p>So when a post request is made on the homepage, we create a new Note object in n (thanks to the DataMapper ORM, Note.new represents a new row in the notes table in the database). The content field is set to the submitted data from the textarea and the created_at and updated_at datetime fields are set to the current timestamp.</p>
    
    <p>The new note is then saved, and the user redirected back to the homepage where the new note will be displayed.</p>

  <h3>Update an emotion</h3>
   {% codeblock Before we can update an emotion we have to fetch it first lang:ruby %}
    get '/:id' do  
      @note = Note.get params[:id]  
      @title = "Edit note ##{params[:id]}"  
      erb :edit  
    end{% endcodeblock %}

   {% codeblock edit.erb: The view for editing a note lang:ruby %}
    <% if @note %>  
      <form action="/<%= @note.id %>" method="post" id="edit">  
        <input type="hidden" name="_method" value="put">  
        <textarea name="content"><%= @note.content %></textarea>   
        <input type="submit">  
      </form>  
      <p><a href="http://awijnen.github.com/<%= @note.id %>/delete">Delete</a></p>  
    <% else %>  
      <p>Note not found.</p>  
    <% end %>{% endcodeblock %}    

    {% codeblock Update an existing emotion and save it to the database lang:ruby %}
      put '/:id' do  
        n = Note.get params[:id]  
        n.content = params[:content]  
        n.complete = params[:complete] ? 1 : 0  
        n.updated_at = Time.now  
        n.save  
        redirect '/'  
      end{% endcodeblock %}

  <h3>Delete an emotion</h3>
    {% codeblock Before we can delete an emotion we have to fetch it first lang:ruby %}
     get '/:id/delete' do  
      @note = Note.get params[:id]  
      @title = "Confirm deletion of note ##{params[:id]}"  
      erb :delete  
    end{% endcodeblock %}

    {% codeblock delete.erb: The view for deleting a note lang:erb %}
    <% if @note %>  
      <p>Are you sure you want to delete the following note: <em>"<%= @note.content %>"</em>?</p> 
      <form action="/<%= @note.id %>" method="post">  
        <input type="hidden" name="_method" value="delete">  
        <input type="submit" value="Yes, Delete It!">  
        <a href="http://awijnen.github.com/<%= @note.id %>">Cancel</a>  
      </form>  
    <% else %>  
      <p>Note not found.</p>  
    <% end %>{% endcodeblock %} 


    {% codeblock Delete an existing emotion, which removes it from the database lang:ruby %}
    delete '/:id' do  
      n = Note.get params[:id]  
      n.destroy  
      redirect '/'  
    end {% endcodeblock %}

  <h3>Create a layout</h3>
  <p>It's time to create the html struture of our page. We'll do that in two parts. The first part is the skeleton of the website, which will basically be everything that's copied across pages (i.e. header, footer, background, etcera. This is typically stored in the <code>layout.erb</code> file.</p>

  {% codeblock layout.erb lang:erb %}
  <!doctype html>  
    <html lang="en">  
    <head>  
      <meta charset="utf8">  
      <title><%= @title + ' | Feeling Friday' %></title>  
      <link href="http://awijnen.github.com/reset.css" rel="stylesheet" type="text/css">  
      <link href="http://awijnen.github.com/style.css" rel="stylesheet" type="text/css">
      <script src="http://awijnen.github.com/main.js"></script>
    </head>  
    <body>  
      <header>  
        <hgroup>  
          <h1><a href="http://awijnen.github.com/">Feeling Friday</a></h1>  
          <h2>'cause we're an emotional bunch</h2>
          <a id = "github" href="https://github.com/awijnen/Feeling_Friday">
            <img src= "https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png" alt="Fork me on GitHub">
          </a>   
        </hgroup>  
      </header>  
      
        <div id="main">
          <%= yield %>  
        </div>  
        
      <footer>  
        <p><small>An app for the <a href="http://students.flatironschool.com/">Students of the Flatiron School</a>.</small></p> 
      </footer> 

      # Google Analytics
      <script type="text/javascript">

        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-38874027-1']);
        _gaq.push(['_trackPageview']);

        (function() {
          var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
          ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
          var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();

      </script>

    </body>  
    </html>{% endcodeblock %}

  <p>The most important line of code in <code>layout.erb</code> is where <code>yield</code> is defined. It is at this exact moment that we'll insert all the html content defined in <code>home.erb</code>, <code>edit.erb</code>, and <code>delete.erb</code> (and any other view you might want to add for that matter).</p>

  <p>Next, we'll code up the html for the actual emotion form (where you add a new emotion), as well as the html that will display all the emotions from the database. Again, this code will be injected in <code>layout.erb</code> where <code>yield</code> is defined.</p>

  {% codeblock home.erb lang:erb %}
    {% endcodeblock %}


<!-- <p class="remove">Remove all this Emotional Crap!<a href='http://awijnen.github.com/migrate'><input type="submit" name="Submit"></a></p> -->

  <h3>Time for some Style</h3>
  <p>Our routes and views are all set. Time to make the whole thing look pretty.</p>



  <h3>Conclusion</h3>
  <p>There you have it, you built your first data driven Sinatra app. Awesome! Hope you enjoyed it. Don't hesitate to reach out on <a href="https://www.twitter.com/anthonywijnen">twitter</a>, or <a href="http://github.com/awijnen">github</a> if you have any questions.</p>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming used to be my kryptonite]]></title>
    <link href="http://awijnen.github.com/blog/2013/02/12/programming-used-to-be-my-kryptonite/"/>
    <updated>2013-02-12T11:43:00-05:00</updated>
    <id>http://awijnen.github.com/blog/2013/02/12/programming-used-to-be-my-kryptonite</id>
    <content type="html"><![CDATA[<div class='container'>
<p>As an EE major I enjoyed dabbling with hardware. Nice and tangible. However, for some strange reason, I consistently cringed at the thought of writing a line of code. </p>

<p>The fact that the first programming class I ever took was an introduction to JAVA might have something to do with that. Thanks a lot <a href="http://www.kul.com">Alma Mater</a>! You managed to disinterest me in the one field that is thoroughly shaking up every traditional industry in the world. Code became my kryptonite. Yet I look ridiculous in spandex, I would die if I jumped out of a window, and I don't have a twelve pack. Not fair!</p>

<img src="http://www.allmotivated.com/pictures/Demotivational-pictures-red_Kryptonite.jpg" alt="Red Kryptonite">
<br><br>

<p>Luckily, I found the light.</p>

<p>Last year, with the advent of some amazing initiatives like <a href="http://www.teamtreehouse.com">Team Treehouse</a>, <a href="www.codeschool.com">CodeSchool</a>, and <a href="www.codecademy.com">Codecademy</a>, we took leaps and bounds with respect to teaching programming. Early 2012, together with <a href="http://www.codecademy.com/blog/50-make-2013-your-code-year">450,000 others</a>, I pledged to add a new skill to my repertoire. To add some fuel to the fire, I took a four-month sabbatical to start off 2013 to attend the <a href="http://www.flatironschool.com">Flatiron School</a>.</p>

<p>I feel strongly about the need to achieve code literacy. Here are four reasons why I think you should too:</p>
<strong>1. Economic value</strong>
<p>Every industry is being disrupted by software. Amazon punched Borders in the face so hard <a href="http://www.slate.com/articles/business/moneybox/2011/07/readers_without_borders.html">they stayed down</a>. iTunes, Spotify, and Pandora are reducing record labels to ‘dumb’ content farms. These are just two examples where software is engulfing large parts of an industry’s value chain.  It’s happening in every industry. Old- and new-skool. Marc Andreessen described it best: <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">‘Software is eating the world’</a>.</p>

<strong>2. Freedom</strong>
<p>Do you know what it takes to write a web or mobile application? A computer. That’s it. Yes, you probably need an outlet to charge it too. But that’s really it. You can code at home, from your local Starbucks, the office, on a plane, or while sitting on your grandma’s couch. Now that’s what I call freedom. Compare that to the cost and effort of setting up any traditional brick-and-mortar business.</p>

<strong>3. Community</strong>
<p>There are plenty of <a href="http://www.hanselman.com/blog/BeyondElvisEinsteinAndMortNewProgrammingStereotypesForWeb20.aspx">stereotypes</a> floating around describing your average programmer. Like any stereotype, they all hold some truth. That being said, I think comradery and a sense of community are what define programmers the most. They are literally always available to help. Just browse over to <a href="http://www.stackoverflow.com">Stack Overflow</a> if you don’t believe me. There’s even a free <a href="http://rails.pockethotline.com/">Rails Hotline</a> for crying out loud.</p>

<strong>4. Creativity</strong>
<p>Finally, coding is an art. It’s a form of expression. Just like writing, composing, or painting. You are presented with a blank slate, and anything is possible from that point on. I strongly feel creativity behaves like muscle does. Flexing them regularly makes you stronger, faster, leaner. Programming will sharpen your mind. Apply it however way you want.</p>


<strong>Conclusion</strong>
<p>Code literacy is at an abysmally low level today. Why? Children and adolescents are not properly stimulated to pick up programming from a young age. It’s a shame, since software is eating the world, taking over large parts of the value chain in nearly every industry.</p>

<p>We don’t need more bankers, consultants, brokers, or any other type of information-shuffler for that matter. We need people that can build. My advice? Learn how to code. Now!</p>

<p>Would you agree?</p>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://awijnen.github.com/blog/2013/02/05/hello-world/"/>
    <updated>2013-02-05T20:13:00-05:00</updated>
    <id>http://awijnen.github.com/blog/2013/02/05/hello-world</id>
    <content type="html"><![CDATA[<p>Some text</p>

]]></content>
  </entry>
  
</feed>
